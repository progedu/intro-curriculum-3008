{
  "_args": [
    [
      {
        "raw": "scoped-http-client@0.11.0",
        "scope": null,
        "escapedName": "scoped-http-client",
        "name": "scoped-http-client",
        "rawSpec": "0.11.0",
        "spec": "0.11.0",
        "type": "version"
      },
      "/home/vagrant/workspace/intro-curriculum-3008/node_modules/hubot"
    ]
  ],
  "_from": "scoped-http-client@0.11.0",
  "_id": "scoped-http-client@0.11.0",
  "_inCache": true,
  "_location": "/scoped-http-client",
  "_npmUser": {
    "name": "technicalpickles",
    "email": "josh@technicalpickles.com"
  },
  "_npmVersion": "1.4.23",
  "_phantomChildren": {},
  "_requested": {
    "raw": "scoped-http-client@0.11.0",
    "scope": null,
    "escapedName": "scoped-http-client",
    "name": "scoped-http-client",
    "rawSpec": "0.11.0",
    "spec": "0.11.0",
    "type": "version"
  },
  "_requiredBy": [
    "/hubot"
  ],
  "_resolved": "https://registry.npmjs.org/scoped-http-client/-/scoped-http-client-0.11.0.tgz",
  "_shasum": "887fa82a8360f15d639a52e504e563c157d26d74",
  "_shrinkwrap": null,
  "_spec": "scoped-http-client@0.11.0",
  "_where": "/home/vagrant/workspace/intro-curriculum-3008/node_modules/hubot",
  "author": {
    "name": "technoweenie"
  },
  "bugs": {
    "url": "https://github.com/technoweenie/node-scoped-http-client/issues"
  },
  "dependencies": {},
  "description": "http client request wrapper",
  "devDependencies": {
    "coffee-script": "1.3.3"
  },
  "directories": {
    "lib": "./src"
  },
  "dist": {
    "shasum": "887fa82a8360f15d639a52e504e563c157d26d74",
    "tarball": "https://registry.npmjs.org/scoped-http-client/-/scoped-http-client-0.11.0.tgz"
  },
  "engines": [
    "node >= 0.8.0"
  ],
  "gitHead": "329d4f37cda351da6aeabf8bf518372c5db74bec",
  "homepage": "https://github.com/technoweenie/node-scoped-http-client",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/technoweenie/node-scoped-http-client/blob/master/LICENSE"
    }
  ],
  "main": "./src/index",
  "maintainers": [
    {
      "name": "technoweenie",
      "email": "technoweenie@gmail.com"
    },
    {
      "name": "technicalpickles",
      "email": "josh@technicalpickles.com"
    },
    {
      "name": "keith_duncan",
      "email": "keith_duncan@me.com"
    },
    {
      "name": "michaelansel",
      "email": "npm@anselcomputers.com"
    }
  ],
  "name": "scoped-http-client",
  "optionalDependencies": {},
  "readme": "# Scoped HTTP Client for Node.js\n\n[Node.js's HTTP client][client] is great, but a little too low level for \ncommon purposes.  It's common practice for some libraries to\nextract this out so it's a bit nicer to work with.\n\n[client]: http://nodejs.org/api/http.html#http_http_request_options_callback\n\n```javascript\nfunction(method, path, customHeaders, body, callback) {\n  var client = http.createClient(url)\n  client.request(method, path, headers)\n  // ...\n}\n```\n\nI hate functions with lots of optional arguments.  Let's turn that into:\n\n```javascript\nvar scopedClient = require('./lib')\n  , util         = require('util')\n\nvar client = scopedClient.create('https://api.github.com')\n  .header('accept', 'application/json')\n  .path('user/show/technoweenie')\n  .get()(function(err, resp, body) {\n    util.puts(body)\n  })\n```\n\nYou can scope a client to make requests with certain parameters without\naffecting the main client instance:\n\n```javascript\nclient.path('https://api.github.com') // reset path\nclient.scope('users/technoweenie', function(cli) {\n  // cli's path is \"https://api.github.com/users/technoweenie\"\n  cli.get()(function(err, resp, body) {\n    util.puts(body)\n  })\n})\n\n// client's path is back to just \"https://api.github.com\"\n```\n\nYou can use `.post()`, `.put()`, `.del()`, and `.head()`.\n\n```javascript\nclient.query({login:'technoweenie',token:'...'})\n  .scope('users/technoweenie', function(cli) {\n    var data = JSON.stringify({location: 'SF'})\n\n    // posting data!\n    cli.post(data)(function(err, resp, body) {\n      util.puts(body)\n    })\n  })\n```\n\nSometimes you want to stream the request body to the server.  The request \nis a standard [http.clientRequest][request].\n\n```javascript\nclient.post(function (req) {\n  req.write(\"...\")\n  req.write(\"...\")\n})(function(err, resp, body) {\n  // ...\n})\n```\n\nAnd other times, you want to stream the response from the server.  Simply \nlisten for the request's response event yourself and omit the response \ncallback.\n\n```javascript\nclient.get(function (err, req) {\n  // do your own thing\n  req.addListener('response', function (resp) {\n    resp.addListener('data', function (chunk) {\n      util.puts(\"CHUNK: \" + chunk)\n    })\n  })\n})()\n```\n\n[request]: http://nodejs.org/api/http.html#http_class_http_clientrequest\n\nBasic HTTP authentication is supported:\n\n```javascript\nclient.get(function (err, req) {\n  // we'll keep this conversation secret...\n  req.auth('technoweenie', '...')\n})\n```\n\nAdding simple timeout support:\n\n\tclient = ScopedClient.create('http://10.255.255.1:9999');\n\n\tclient.timeout(100);\n\n\tclient.get()(function(err, resp, body) {\n\t  if (err) {\n\t    util.puts(\"ERROR: \" + err);\n\t   }\n\t});\n\n\n## Development\n\nRun this in the main directory to compile coffeescript to javascript as you go:\n\n    $ coffee -wc -o lib --no-wrap src/**/*.coffee\n\n\n## Copyright\n\nCopyright (c) 2014 rick. See LICENSE for details.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/technoweenie/node-scoped-http-client.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "0.11.0"
}
